# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_qft')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_qft')
    _qft = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_qft', [dirname(__file__)])
        except ImportError:
            import _qft
            return _qft
        try:
            _mod = imp.load_module('_qft', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _qft = swig_import_helper()
    del swig_import_helper
else:
    import _qft
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _qft.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _qft.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _qft.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _qft.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _qft.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _qft.SwigPyIterator_equal(self, x)

    def copy(self):
        return _qft.SwigPyIterator_copy(self)

    def next(self):
        return _qft.SwigPyIterator_next(self)

    def __next__(self):
        return _qft.SwigPyIterator___next__(self)

    def previous(self):
        return _qft.SwigPyIterator_previous(self)

    def advance(self, n):
        return _qft.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _qft.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _qft.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _qft.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _qft.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _qft.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _qft.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _qft.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _qft.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _qft.vector_double___nonzero__(self)

    def __bool__(self):
        return _qft.vector_double___bool__(self)

    def __len__(self):
        return _qft.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _qft.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _qft.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _qft.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _qft.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _qft.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _qft.vector_double___setitem__(self, *args)

    def pop(self):
        return _qft.vector_double_pop(self)

    def append(self, x):
        return _qft.vector_double_append(self, x)

    def empty(self):
        return _qft.vector_double_empty(self)

    def size(self):
        return _qft.vector_double_size(self)

    def swap(self, v):
        return _qft.vector_double_swap(self, v)

    def begin(self):
        return _qft.vector_double_begin(self)

    def end(self):
        return _qft.vector_double_end(self)

    def rbegin(self):
        return _qft.vector_double_rbegin(self)

    def rend(self):
        return _qft.vector_double_rend(self)

    def clear(self):
        return _qft.vector_double_clear(self)

    def get_allocator(self):
        return _qft.vector_double_get_allocator(self)

    def pop_back(self):
        return _qft.vector_double_pop_back(self)

    def erase(self, *args):
        return _qft.vector_double_erase(self, *args)

    def __init__(self, *args):
        this = _qft.new_vector_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _qft.vector_double_push_back(self, x)

    def front(self):
        return _qft.vector_double_front(self)

    def back(self):
        return _qft.vector_double_back(self)

    def assign(self, n, x):
        return _qft.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _qft.vector_double_resize(self, *args)

    def insert(self, *args):
        return _qft.vector_double_insert(self, *args)

    def reserve(self, n):
        return _qft.vector_double_reserve(self, n)

    def capacity(self):
        return _qft.vector_double_capacity(self)
    __swig_destroy__ = _qft.delete_vector_double
    __del__ = lambda self: None
vector_double_swigregister = _qft.vector_double_swigregister
vector_double_swigregister(vector_double)

class LorentzVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LorentzVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LorentzVector, name)
    __repr__ = _swig_repr

    def __init__(self, ix, iy, iz, it):
        this = _qft.new_LorentzVector(ix, iy, iz, it)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def x(self):
        return _qft.LorentzVector_x(self)

    def y(self):
        return _qft.LorentzVector_y(self)

    def z(self):
        return _qft.LorentzVector_z(self)

    def t(self):
        return _qft.LorentzVector_t(self)

    def e(self):
        return _qft.LorentzVector_e(self)

    def perp(self):
        return _qft.LorentzVector_perp(self)

    def perp2(self):
        return _qft.LorentzVector_perp2(self)

    def mass(self):
        return _qft.LorentzVector_mass(self)

    def mass2(self):
        return _qft.LorentzVector_mass2(self)

    def p(self):
        return _qft.LorentzVector_p(self)

    def phi(self):
        return _qft.LorentzVector_phi(self)

    def theta(self):
        return _qft.LorentzVector_theta(self)

    def cosTheta(self):
        return _qft.LorentzVector_cosTheta(self)

    def eta(self):
        return _qft.LorentzVector_eta(self)

    def PrintPtEtaPhiM(self):
        return _qft.LorentzVector_PrintPtEtaPhiM(self)

    def PrintPEtaPhiE(self):
        return _qft.LorentzVector_PrintPEtaPhiE(self)

    def PrintXYZT(self):
        return _qft.LorentzVector_PrintXYZT(self)

    def Print(self):
        return _qft.LorentzVector_Print(self)

    def __add__(self, right):
        return _qft.LorentzVector___add__(self, right)

    def __sub__(self, right):
        return _qft.LorentzVector___sub__(self, right)

    def __mul__(self, right):
        return _qft.LorentzVector___mul__(self, right)
    __swig_destroy__ = _qft.delete_LorentzVector
    __del__ = lambda self: None
LorentzVector_swigregister = _qft.LorentzVector_swigregister
LorentzVector_swigregister(LorentzVector)


def testLorentzVectors():
    return _qft.testLorentzVectors()
testLorentzVectors = _qft.testLorentzVectors

def getQ_T3_NC(pdgID, q, t3, NC):
    return _qft.getQ_T3_NC(pdgID, q, t3, NC)
getQ_T3_NC = _qft.getQ_T3_NC
class Particle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Particle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Particle, name)
    __repr__ = _swig_repr

    def __init__(self, p4, pdgID):
        this = _qft.new_Particle(p4, pdgID)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def p4(self):
        return _qft.Particle_p4(self)

    def q(self):
        return _qft.Particle_q(self)

    def t3(self):
        return _qft.Particle_t3(self)

    def pdgID(self):
        return _qft.Particle_pdgID(self)
    __swig_destroy__ = _qft.delete_Particle
    __del__ = lambda self: None
Particle_swigregister = _qft.Particle_swigregister
Particle_swigregister(Particle)


def dSigmaDOmega(p1, p2, pdgID_out, cosTheta):
    return _qft.dSigmaDOmega(p1, p2, pdgID_out, cosTheta)
dSigmaDOmega = _qft.dSigmaDOmega
class s_partoncontent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s_partoncontent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s_partoncontent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["upv"] = _qft.s_partoncontent_upv_set
    __swig_getmethods__["upv"] = _qft.s_partoncontent_upv_get
    if _newclass:
        upv = _swig_property(_qft.s_partoncontent_upv_get, _qft.s_partoncontent_upv_set)
    __swig_setmethods__["dnv"] = _qft.s_partoncontent_dnv_set
    __swig_getmethods__["dnv"] = _qft.s_partoncontent_dnv_get
    if _newclass:
        dnv = _swig_property(_qft.s_partoncontent_dnv_get, _qft.s_partoncontent_dnv_set)
    __swig_setmethods__["usea"] = _qft.s_partoncontent_usea_set
    __swig_getmethods__["usea"] = _qft.s_partoncontent_usea_get
    if _newclass:
        usea = _swig_property(_qft.s_partoncontent_usea_get, _qft.s_partoncontent_usea_set)
    __swig_setmethods__["dsea"] = _qft.s_partoncontent_dsea_set
    __swig_getmethods__["dsea"] = _qft.s_partoncontent_dsea_get
    if _newclass:
        dsea = _swig_property(_qft.s_partoncontent_dsea_get, _qft.s_partoncontent_dsea_set)
    __swig_setmethods__["str"] = _qft.s_partoncontent_str_set
    __swig_getmethods__["str"] = _qft.s_partoncontent_str_get
    if _newclass:
        str = _swig_property(_qft.s_partoncontent_str_get, _qft.s_partoncontent_str_set)
    __swig_setmethods__["sbar"] = _qft.s_partoncontent_sbar_set
    __swig_getmethods__["sbar"] = _qft.s_partoncontent_sbar_get
    if _newclass:
        sbar = _swig_property(_qft.s_partoncontent_sbar_get, _qft.s_partoncontent_sbar_set)
    __swig_setmethods__["chm"] = _qft.s_partoncontent_chm_set
    __swig_getmethods__["chm"] = _qft.s_partoncontent_chm_get
    if _newclass:
        chm = _swig_property(_qft.s_partoncontent_chm_get, _qft.s_partoncontent_chm_set)
    __swig_setmethods__["cbar"] = _qft.s_partoncontent_cbar_set
    __swig_getmethods__["cbar"] = _qft.s_partoncontent_cbar_get
    if _newclass:
        cbar = _swig_property(_qft.s_partoncontent_cbar_get, _qft.s_partoncontent_cbar_set)
    __swig_setmethods__["bot"] = _qft.s_partoncontent_bot_set
    __swig_getmethods__["bot"] = _qft.s_partoncontent_bot_get
    if _newclass:
        bot = _swig_property(_qft.s_partoncontent_bot_get, _qft.s_partoncontent_bot_set)
    __swig_setmethods__["bbar"] = _qft.s_partoncontent_bbar_set
    __swig_getmethods__["bbar"] = _qft.s_partoncontent_bbar_get
    if _newclass:
        bbar = _swig_property(_qft.s_partoncontent_bbar_get, _qft.s_partoncontent_bbar_set)
    __swig_setmethods__["glu"] = _qft.s_partoncontent_glu_set
    __swig_getmethods__["glu"] = _qft.s_partoncontent_glu_get
    if _newclass:
        glu = _swig_property(_qft.s_partoncontent_glu_get, _qft.s_partoncontent_glu_set)
    __swig_setmethods__["phot"] = _qft.s_partoncontent_phot_set
    __swig_getmethods__["phot"] = _qft.s_partoncontent_phot_get
    if _newclass:
        phot = _swig_property(_qft.s_partoncontent_phot_get, _qft.s_partoncontent_phot_set)

    def __init__(self):
        this = _qft.new_s_partoncontent()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _qft.delete_s_partoncontent
    __del__ = lambda self: None
s_partoncontent_swigregister = _qft.s_partoncontent_swigregister
s_partoncontent_swigregister(s_partoncontent)

class c_mstwpdf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_mstwpdf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_mstwpdf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cont"] = _qft.c_mstwpdf_cont_set
    __swig_getmethods__["cont"] = _qft.c_mstwpdf_cont_get
    if _newclass:
        cont = _swig_property(_qft.c_mstwpdf_cont_get, _qft.c_mstwpdf_cont_set)
    __swig_setmethods__["xmin"] = _qft.c_mstwpdf_xmin_set
    __swig_getmethods__["xmin"] = _qft.c_mstwpdf_xmin_get
    if _newclass:
        xmin = _swig_property(_qft.c_mstwpdf_xmin_get, _qft.c_mstwpdf_xmin_set)
    __swig_setmethods__["xmax"] = _qft.c_mstwpdf_xmax_set
    __swig_getmethods__["xmax"] = _qft.c_mstwpdf_xmax_get
    if _newclass:
        xmax = _swig_property(_qft.c_mstwpdf_xmax_get, _qft.c_mstwpdf_xmax_set)
    __swig_setmethods__["qsqmin"] = _qft.c_mstwpdf_qsqmin_set
    __swig_getmethods__["qsqmin"] = _qft.c_mstwpdf_qsqmin_get
    if _newclass:
        qsqmin = _swig_property(_qft.c_mstwpdf_qsqmin_get, _qft.c_mstwpdf_qsqmin_set)
    __swig_setmethods__["qsqmax"] = _qft.c_mstwpdf_qsqmax_set
    __swig_getmethods__["qsqmax"] = _qft.c_mstwpdf_qsqmax_get
    if _newclass:
        qsqmax = _swig_property(_qft.c_mstwpdf_qsqmax_get, _qft.c_mstwpdf_qsqmax_set)
    __swig_setmethods__["mCharm"] = _qft.c_mstwpdf_mCharm_set
    __swig_getmethods__["mCharm"] = _qft.c_mstwpdf_mCharm_get
    if _newclass:
        mCharm = _swig_property(_qft.c_mstwpdf_mCharm_get, _qft.c_mstwpdf_mCharm_set)
    __swig_setmethods__["mBottom"] = _qft.c_mstwpdf_mBottom_set
    __swig_getmethods__["mBottom"] = _qft.c_mstwpdf_mBottom_get
    if _newclass:
        mBottom = _swig_property(_qft.c_mstwpdf_mBottom_get, _qft.c_mstwpdf_mBottom_set)
    __swig_setmethods__["alphaSQ0"] = _qft.c_mstwpdf_alphaSQ0_set
    __swig_getmethods__["alphaSQ0"] = _qft.c_mstwpdf_alphaSQ0_get
    if _newclass:
        alphaSQ0 = _swig_property(_qft.c_mstwpdf_alphaSQ0_get, _qft.c_mstwpdf_alphaSQ0_set)
    __swig_setmethods__["alphaSMZ"] = _qft.c_mstwpdf_alphaSMZ_set
    __swig_getmethods__["alphaSMZ"] = _qft.c_mstwpdf_alphaSMZ_get
    if _newclass:
        alphaSMZ = _swig_property(_qft.c_mstwpdf_alphaSMZ_get, _qft.c_mstwpdf_alphaSMZ_set)
    __swig_setmethods__["distance"] = _qft.c_mstwpdf_distance_set
    __swig_getmethods__["distance"] = _qft.c_mstwpdf_distance_get
    if _newclass:
        distance = _swig_property(_qft.c_mstwpdf_distance_get, _qft.c_mstwpdf_distance_set)
    __swig_setmethods__["tolerance"] = _qft.c_mstwpdf_tolerance_set
    __swig_getmethods__["tolerance"] = _qft.c_mstwpdf_tolerance_get
    if _newclass:
        tolerance = _swig_property(_qft.c_mstwpdf_tolerance_get, _qft.c_mstwpdf_tolerance_set)
    __swig_setmethods__["alphaSorder"] = _qft.c_mstwpdf_alphaSorder_set
    __swig_getmethods__["alphaSorder"] = _qft.c_mstwpdf_alphaSorder_get
    if _newclass:
        alphaSorder = _swig_property(_qft.c_mstwpdf_alphaSorder_get, _qft.c_mstwpdf_alphaSorder_set)
    __swig_setmethods__["alphaSnfmax"] = _qft.c_mstwpdf_alphaSnfmax_set
    __swig_getmethods__["alphaSnfmax"] = _qft.c_mstwpdf_alphaSnfmax_get
    if _newclass:
        alphaSnfmax = _swig_property(_qft.c_mstwpdf_alphaSnfmax_get, _qft.c_mstwpdf_alphaSnfmax_set)

    def update(self, x, q):
        return _qft.c_mstwpdf_update(self, x, q)

    def parton(self, flavour, x, q):
        return _qft.c_mstwpdf_parton(self, flavour, x, q)

    def __init__(self, filename, warn=False, fatal=True):
        this = _qft.new_c_mstwpdf(filename, warn, fatal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _qft.delete_c_mstwpdf
    __del__ = lambda self: None
c_mstwpdf_swigregister = _qft.c_mstwpdf_swigregister
c_mstwpdf_swigregister(c_mstwpdf)

# This file is compatible with both classic and new-style classes.


