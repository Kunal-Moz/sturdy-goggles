# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_scattering')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_scattering')
    _scattering = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_scattering', [dirname(__file__)])
        except ImportError:
            import _scattering
            return _scattering
        try:
            _mod = imp.load_module('_scattering', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _scattering = swig_import_helper()
    del swig_import_helper
else:
    import _scattering
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _scattering.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _scattering.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _scattering.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _scattering.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _scattering.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _scattering.SwigPyIterator_equal(self, x)

    def copy(self):
        return _scattering.SwigPyIterator_copy(self)

    def next(self):
        return _scattering.SwigPyIterator_next(self)

    def __next__(self):
        return _scattering.SwigPyIterator___next__(self)

    def previous(self):
        return _scattering.SwigPyIterator_previous(self)

    def advance(self, n):
        return _scattering.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _scattering.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _scattering.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _scattering.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _scattering.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _scattering.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _scattering.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _scattering.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class pair_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _scattering.new_pair_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _scattering.pair_double_first_set
    __swig_getmethods__["first"] = _scattering.pair_double_first_get
    if _newclass:
        first = _swig_property(_scattering.pair_double_first_get, _scattering.pair_double_first_set)
    __swig_setmethods__["second"] = _scattering.pair_double_second_set
    __swig_getmethods__["second"] = _scattering.pair_double_second_get
    if _newclass:
        second = _swig_property(_scattering.pair_double_second_get, _scattering.pair_double_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _scattering.delete_pair_double
    __del__ = lambda self: None
pair_double_swigregister = _scattering.pair_double_swigregister
pair_double_swigregister(pair_double)

class trajectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, trajectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, trajectory, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _scattering.trajectory_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scattering.trajectory___nonzero__(self)

    def __bool__(self):
        return _scattering.trajectory___bool__(self)

    def __len__(self):
        return _scattering.trajectory___len__(self)

    def __getslice__(self, i, j):
        return _scattering.trajectory___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scattering.trajectory___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scattering.trajectory___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scattering.trajectory___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scattering.trajectory___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scattering.trajectory___setitem__(self, *args)

    def pop(self):
        return _scattering.trajectory_pop(self)

    def append(self, x):
        return _scattering.trajectory_append(self, x)

    def empty(self):
        return _scattering.trajectory_empty(self)

    def size(self):
        return _scattering.trajectory_size(self)

    def swap(self, v):
        return _scattering.trajectory_swap(self, v)

    def begin(self):
        return _scattering.trajectory_begin(self)

    def end(self):
        return _scattering.trajectory_end(self)

    def rbegin(self):
        return _scattering.trajectory_rbegin(self)

    def rend(self):
        return _scattering.trajectory_rend(self)

    def clear(self):
        return _scattering.trajectory_clear(self)

    def get_allocator(self):
        return _scattering.trajectory_get_allocator(self)

    def pop_back(self):
        return _scattering.trajectory_pop_back(self)

    def erase(self, *args):
        return _scattering.trajectory_erase(self, *args)

    def __init__(self, *args):
        this = _scattering.new_trajectory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _scattering.trajectory_push_back(self, x)

    def front(self):
        return _scattering.trajectory_front(self)

    def back(self):
        return _scattering.trajectory_back(self)

    def assign(self, n, x):
        return _scattering.trajectory_assign(self, n, x)

    def resize(self, *args):
        return _scattering.trajectory_resize(self, *args)

    def insert(self, *args):
        return _scattering.trajectory_insert(self, *args)

    def reserve(self, n):
        return _scattering.trajectory_reserve(self, n)

    def capacity(self):
        return _scattering.trajectory_capacity(self)
    __swig_destroy__ = _scattering.delete_trajectory
    __del__ = lambda self: None
trajectory_swigregister = _scattering.trajectory_swigregister
trajectory_swigregister(trajectory)

class lennard_jones(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lennard_jones, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lennard_jones, name)
    __repr__ = _swig_repr

    def __init__(self, V0, r0=1.):
        this = _scattering.new_lennard_jones(V0, r0)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, r):
        return _scattering.lennard_jones___call__(self, r)

    def V0(self):
        return _scattering.lennard_jones_V0(self)

    def r0(self):
        return _scattering.lennard_jones_r0(self)
    __swig_destroy__ = _scattering.delete_lennard_jones
    __del__ = lambda self: None
lennard_jones_swigregister = _scattering.lennard_jones_swigregister
lennard_jones_swigregister(lennard_jones)

class hard_sphere_potential(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hard_sphere_potential, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hard_sphere_potential, name)
    __repr__ = _swig_repr

    def __init__(self, V0, r0=1.0):
        this = _scattering.new_hard_sphere_potential(V0, r0)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, r):
        return _scattering.hard_sphere_potential___call__(self, r)

    def V0(self):
        return _scattering.hard_sphere_potential_V0(self)

    def r0(self):
        return _scattering.hard_sphere_potential_r0(self)
    __swig_destroy__ = _scattering.delete_hard_sphere_potential
    __del__ = lambda self: None
hard_sphere_potential_swigregister = _scattering.hard_sphere_potential_swigregister
hard_sphere_potential_swigregister(hard_sphere_potential)

class Yukawa_potential(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Yukawa_potential, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Yukawa_potential, name)
    __repr__ = _swig_repr

    def __init__(self, V0, r0):
        this = _scattering.new_Yukawa_potential(V0, r0)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, r):
        return _scattering.Yukawa_potential___call__(self, r)

    def V0(self):
        return _scattering.Yukawa_potential_V0(self)

    def r0(self):
        return _scattering.Yukawa_potential_r0(self)
    __swig_destroy__ = _scattering.delete_Yukawa_potential
    __del__ = lambda self: None
Yukawa_potential_swigregister = _scattering.Yukawa_potential_swigregister
Yukawa_potential_swigregister(Yukawa_potential)

class CrossSection_hard_sphere_potential(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossSection_hard_sphere_potential, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrossSection_hard_sphere_potential, name)
    __repr__ = _swig_repr

    def __init__(self, V, E, b, r_max, steps):
        this = _scattering.new_CrossSection_hard_sphere_potential(V, E, b, r_max, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_trajectory(self):
        return _scattering.CrossSection_hard_sphere_potential_get_trajectory(self)

    def calculate_trajectory(self):
        return _scattering.CrossSection_hard_sphere_potential_calculate_trajectory(self)
    __swig_destroy__ = _scattering.delete_CrossSection_hard_sphere_potential
    __del__ = lambda self: None
CrossSection_hard_sphere_potential_swigregister = _scattering.CrossSection_hard_sphere_potential_swigregister
CrossSection_hard_sphere_potential_swigregister(CrossSection_hard_sphere_potential)

class CrossSection_lennard_jones(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossSection_lennard_jones, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrossSection_lennard_jones, name)
    __repr__ = _swig_repr

    def __init__(self, V, E, b, r_max, steps):
        this = _scattering.new_CrossSection_lennard_jones(V, E, b, r_max, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_trajectory(self):
        return _scattering.CrossSection_lennard_jones_get_trajectory(self)

    def calculate_trajectory(self):
        return _scattering.CrossSection_lennard_jones_calculate_trajectory(self)
    __swig_destroy__ = _scattering.delete_CrossSection_lennard_jones
    __del__ = lambda self: None
CrossSection_lennard_jones_swigregister = _scattering.CrossSection_lennard_jones_swigregister
CrossSection_lennard_jones_swigregister(CrossSection_lennard_jones)

class CrossSection_Yukawa_potential(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossSection_Yukawa_potential, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrossSection_Yukawa_potential, name)
    __repr__ = _swig_repr

    def __init__(self, V, E, b, r_max, steps):
        this = _scattering.new_CrossSection_Yukawa_potential(V, E, b, r_max, steps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_trajectory(self):
        return _scattering.CrossSection_Yukawa_potential_get_trajectory(self)

    def calculate_trajectory(self):
        return _scattering.CrossSection_Yukawa_potential_calculate_trajectory(self)
    __swig_destroy__ = _scattering.delete_CrossSection_Yukawa_potential
    __del__ = lambda self: None
CrossSection_Yukawa_potential_swigregister = _scattering.CrossSection_Yukawa_potential_swigregister
CrossSection_Yukawa_potential_swigregister(CrossSection_Yukawa_potential)

# This file is compatible with both classic and new-style classes.


